cmake_minimum_required (VERSION 3.1)
project ("extension")

option (OPT_LIB_ONLY "Install only protocol library, no other libraries/plugings are built/installed." OFF)
option (OPT_THIS_AND_COMMS_LIBS_ONLY "Install this protocol and COMMS libraries only, no other applications/plugings are built/installed." OFF)
option (OPT_FULL_SOLUTION "Build and install full solution, including CommsChampion sources." ON)
option (OPT_NO_WARN_AS_ERR "Do NOT treat warning as error" OFF)

# Other parameters:
# OPT_INSTALL_DIR - Custom install directory.
# OPT_QT_DIR - Path to custom Qt5 install directory.
# OPT_CC_MAIN_INSTALL_DIR - Path to CommsChampion install directory (if such already built).
# OPT_DOXYGEN_CONFIG_FILE - Path to custom doxygen configuration file.
if (NOT CMAKE_CXX_STANDARD)
    set (CMAKE_CXX_STANDARD 11)
endif()

set (INSTALL_DIR ${CMAKE_BINARY_DIR}/install)
if (NOT "${OPT_INSTALL_DIR}" STREQUAL "")
    set (INSTALL_DIR "${OPT_INSTALL_DIR}")
endif ()

include(GNUInstallDirs)
set (LIB_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_LIBDIR})
set (BIN_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_BINDIR})
set (INC_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_INCLUDEDIR})
set (CONFIG_INSTALL_DIR ${INSTALL_DIR}/config)
set (PLUGIN_INSTALL_DIR ${INSTALL_DIR}/${CMAKE_INSTALL_LIBDIR}/CommsChampion/plugin)
set (DOC_INSTALL_DIR ${INSTALL_DIR}/doc)

install (
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/sbe_example
    DESTINATION ${INC_INSTALL_DIR}
)

FILE(GLOB_RECURSE protocol.headers "include/*.h")
add_custom_target(extension.headers SOURCES ${protocol.headers})

find_package (Doxygen)
if (DOXYGEN_FOUND)
    set (doc_output_dir "${DOC_INSTALL_DIR}/extension")
    make_directory (${doc_output_dir})

    if ("${OPT_DOXYGEN_CONFIG_FILE}" STREQUAL "")
        set (match_str "OUTPUT_DIRECTORY[^\n]*")
        set (replacement_str "OUTPUT_DIRECTORY = ${doc_output_dir}")
        set (config_file "${CMAKE_CURRENT_SOURCE_DIR}/doc/doxygen.conf")
        set (OPT_DOXYGEN_CONFIG_FILE "${CMAKE_CURRENT_BINARY_DIR}/doxygen.conf")

        file (READ ${config_file} config_text)
        string (REGEX REPLACE "${match_str}" "${replacement_str}" modified_config_text "${config_text}")
        file (WRITE "${OPT_DOXYGEN_CONFIG_FILE}" "${modified_config_text}")
    endif ()

    if (NOT EXISTS ${OPT_DOXYGEN_CONFIG_FILE})
        message(FATAL_ERROR "Doxygen configuration file ${OPT_DOXYGEN_CONFIG_FILE} does not exist")
    endif ()

    set (doc_tgt "doc_extension")
    add_custom_target ("${doc_tgt}"
        COMMAND ${DOXYGEN_EXECUTABLE} ${OPT_DOXYGEN_CONFIG_FILE}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif ()

if (OPT_LIB_ONLY)
    return ()
endif ()

######################################################################

set (CC_EXTERNAL_TGT "comms_champion_external")
include(ExternalProject)
macro (externals install_dir build_cc)
    set (cc_tag "v0.23")
    set (cc_main_dir "${CMAKE_BINARY_DIR}/comms_champion")
    set (cc_src_dir "${cc_main_dir}/src")
    set (cc_bin_dir "${cc_main_dir}/build")

    if (NOT "${OPT_QT_DIR}" STREQUAL "")
        set (cc_qt_dir_opt -DCC_QT_DIR=${OPT_QT_DIR})
    endif ()

    if (${build_cc})
        set (CC_PLUGIN_LIBRARIES "comms_champion")
        set (CC_COMMS_CHAMPION_FOUND TRUE)
        set (CC_PLUGIN_LIBRARY_DIRS ${LIB_INSTALL_DIR})
    else ()
        set (ct_lib_only_opt -DCC_COMMS_LIB_ONLY=ON)
    endif ()

    ExternalProject_Add(
        "${CC_EXTERNAL_TGT}"
        PREFIX "${cc_bin_dir}"
        STAMP_DIR "${cc_bin_dir}"
        GIT_REPOSITORY "https://github.com/arobenko/comms_champion.git"
        GIT_TAG "${cc_tag}"
        SOURCE_DIR "${cc_src_dir}"
        CMAKE_ARGS
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCC_INSTALL_DIR=${install_dir}
            -DCC_NO_UNIT_TESTS=ON -DCC_NO_WARN_AS_ERR=ON -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
            -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
            ${cc_qt_dir_opt} ${ct_lib_only_opt}
        BINARY_DIR "${cc_bin_dir}"
    )

    set (CC_EXTERNAL TRUE)
    set (CC_COMMS_FOUND TRUE)
    set (CC_CMAKE_DIR ${LIB_INSTALL_DIR}/cmake)

    include_directories("${install_dir}/${CMAKE_INSTALL_INCLUDEDIR}")
    link_directories("${install_dir}/${CMAKE_INSTALL_LIBDIR}")

endmacro()

######################################################################

if (OPT_THIS_AND_COMMS_LIBS_ONLY)
    externals(${INSTALL_DIR} FALSE)
    return()
endif ()

while (TRUE)
    if (OPT_FULL_SOLUTION)
        externals(${INSTALL_DIR} TRUE)
        break()
    endif ()

    list (APPEND CMAKE_PREFIX_PATH "${INSTALL_DIR}")
    if (NOT "${OPT_CC_MAIN_INSTALL_DIR}" STREQUAL "")
        list (APPEND CMAKE_PREFIX_PATH "${OPT_CC_MAIN_INSTALL_DIR}")
    endif ()

    find_package(CommsChampion QUIET NO_MODULE)

    if (NOT CC_COMMS_FOUND)
        set (externals_install "${CMAKE_BINARY_DIR}/ext_install")
        set (build_cc FALSE)
        if ((NOT OPT_LIB_ONLY) AND (NOT OPT_THIS_AND_COMMS_LIBS_ONLY))
            set (build_cc TRUE)
        endif ()

        externals(${externals_install} ${build_cc})
        break()
    endif ()

    find_package(CommsChampion NO_MODULE)
    if (CC_COMMS_FOUND)
        include_directories(${CC_INCLUDE_DIRS})
    endif ()

    if (CC_COMMS_CHAMPION_FOUND)
        link_directories(${CC_PLUGIN_LIBRARY_DIRS})
        file (RELATIVE_PATH rel_plugin_install_path "${CC_ROOT_DIR}" "${CC_PLUGIN_DIR}")
        set (PLUGIN_INSTALL_DIR "${INSTALL_DIR}/${rel_plugin_install_path}")
    endif ()

    if (EXISTS "${INSTALL_DIR}/cmake/CommsChampionConfig.cmake")
        FILE(GLOB_RECURSE comms.headers "${INSTALL_DIR}/include/comms/*.h")
        add_custom_target(comms.headers SOURCES ${comms.headers})
        FILE(GLOB_RECURSE cc.headers "${INSTALL_DIR}/include/comms_champion/*.h")
        add_custom_target(cc.headers SOURCES ${cc.headers})
    endif ()

    break()
endwhile()

if (NOT "${OPT_QT_DIR}" STREQUAL "")
    list (APPEND CMAKE_PREFIX_PATH ${OPT_QT_DIR})
endif ()

find_package(Qt5Core)

if ((CMAKE_COMPILER_IS_GNUCC) OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
    set (extra_flags_list
        "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wctor-dtor-privacy"
        "-Wmissing-include-dirs"
        "-Woverloaded-virtual" "-Wredundant-decls" "-Wshadow" "-Wundef" "-Wunused"
        "-Wno-unknown-pragmas" "-fdiagnostics-show-option"
    )

    if (CMAKE_COMPILER_IS_GNUCC)
        list (APPEND extra_flags_list
            "-Wnoexcept" "-Wlogical-op" "-Wstrict-null-sentinel"
        )
    endif ()

    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        list (APPEND extra_flags_list "-Wno-dangling-field" "-Wno-unused-command-line-argument" "-ftemplate-depth=1024")
    endif ()

    if (NOT OPT_NO_WARN_AS_ERR)
        list (APPEND extra_flags_list "-Werror")
    endif ()

    string(REPLACE ";" " " extra_flags "${extra_flags_list}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${extra_flags}")
elseif (MSVC)
    add_definitions( "/wd4503" "/wd4309" "/wd4267" "-D_SCL_SECURE_NO_WARNINGS")
    if (NOT CC_NO_WARN_AS_ERR)
        add_definitions("/WX")
    endif ()
endif ()

include_directories(
    BEFORE
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_SOURCE_DIR}/include
)

add_subdirectory(cc_plugin)

